input AddAnimationFrameInput {
  id: ID!
  leds: [PixelInput]!
  clientMutationId: String
}

type AddAnimationFramePayload {
  animationFrame: AnimationFrame!
  clientMutationId: String
}

input AddAnimationInput {
  name: String!
  delay: Int
  clientMutationId: String
}

type AddAnimationPayload {
  animation: Animation!
  clientMutationId: String
}

type Animation implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  delay: Int
  frames: [AnimationFrame]
}

"""A connection to a list of items."""
type AnimationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnimationEdge]
}

"""An edge in a connection."""
type AnimationEdge {
  """The item at the end of the edge"""
  node: Animation

  """A cursor for use in pagination"""
  cursor: String!
}

type AnimationFrame {
  leds: [Pixel]
}

type AnimationSequence implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  animations: [Animation]
}

"""A connection to a list of items."""
type AnimationSequenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnimationSequenceEdge]
}

"""An edge in a connection."""
type AnimationSequenceEdge {
  """The item at the end of the edge"""
  node: AnimationSequence

  """A cursor for use in pagination"""
  cursor: String!
}

enum Colors {
  RED
  GREEN
  BLUE
}

input IdentifySegmentInput {
  ledBarId: ID!
  color: Colors!
  clientMutationId: String
}

type IdentifySegmentPayload {
  ledBar: LedBar!
  clientMutationId: String
}

type LedBar implements Node {
  """The ID of an object"""
  id: ID!
  index: Int
  numLeds: Int
}

"""A connection to a list of items."""
type LedBarConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LedBarEdge]
}

"""An edge in a connection."""
type LedBarEdge {
  """The item at the end of the edge"""
  node: LedBar

  """A cursor for use in pagination"""
  cursor: String!
}

type Message implements Node {
  """The ID of an object"""
  id: ID!
  text: String!
}

type MessageAddedPayload {
  message: Message
}

type Mutation {
  addAnimation(input: AddAnimationInput!): AddAnimationPayload
  addAnimationFrame(input: AddAnimationFrameInput!): AddAnimationFramePayload
  playAnimation(input: PlayAnimationInput!): PlayAnimationPayload
  identifySegment(input: IdentifySegmentInput!): IdentifySegmentPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pixel {
  r: Int
  g: Int
  b: Int
}

input PixelInput {
  r: Int
  g: Int
  b: Int
}

input PlayAnimationInput {
  animationId: ID!
  ledBarId: ID!
  secret: String!
  clientMutationId: String
}

type PlayAnimationPayload {
  animation: Animation!
  clientMutationId: String
}

type Query {
  animation(id: ID!): Animation
  animations(after: String, first: Int, before: String, last: Int): AnimationConnection
  ledBar(id: ID!): LedBar
  ledBars(after: String, first: Int, before: String, last: Int): LedBarConnection
  animationSequence(id: ID!): AnimationSequence
  animationSequences(after: String, first: Int, before: String, last: Int): AnimationSequenceConnection

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: Query
}

type Subscription {
  messageAdded: MessageAddedPayload
}
